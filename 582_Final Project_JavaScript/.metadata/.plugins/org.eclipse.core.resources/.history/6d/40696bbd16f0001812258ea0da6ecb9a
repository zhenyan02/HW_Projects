package finalproject.bookstore;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class SellerDAO {
	
	public Connection getConnection(){
		String connectionUrl = "jdbc:mysql://localhost:3306/onlineide"; 
		Connection connection = null;
		
		try {
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			connection = DriverManager.getConnection(connectionUrl, "root", "zhenyanl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return connection;
		
	}
	
	public void closeConnection(Connection connection){
		try {
			connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void create(Seller seller){
		
		String sql = "insert into sellers(id, name, price) values (? ,?, ?)";
		
		Connection connection = getConnection();
		
		try {
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setInt(1, seller.getId());
			statement.setString(2, seller.getName());
			statement.setDouble(3, seller.getPrice());
			statement.execute();
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("cannot insert this line");
		}finally { 		
			closeConnection(connection);
		}
	}

	public List<Seller> selectAll(){
		List<Seller> sellers = new ArrayList<Seller>();
		
		String sql = "select * from sellers";
		Connection connection = getConnection();
		
		try {
			PreparedStatement statement = connection.prepareStatement(sql);
			ResultSet results = statement.executeQuery();
			while(results.next()){
				int id = results.getInt("id");
				String name = results.getString("name");
				double price = results.getDouble("price");
				//int stockquantity = results.getInt("stockquantity");
				Seller seller = new Seller(id, name, price); 
				sellers.add(seller);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally { 		
			closeConnection(connection);
		}
		
		return sellers;
	}
	
	public void remove(String name){
		String sql = "delete from sellers where name=?";
		
		Connection connection = getConnection();
		
		try {
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setString(1,  name);
			statement.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			closeConnection(connection);
		}
	}
		
	
	public Seller selectOne(String name) {
		Seller app = null;
		
		String sql = "select * from sellers where name=?";
		Connection connection = getConnection();
		
		try {
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setString(1,  name);
			ResultSet results = statement.executeQuery();
			if(results.next()){
				int id = results.getInt("id");
				name = results.getString("name");
				double price = results.getDouble("price");
				app = new Seller(id,name,price);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			closeConnection(connection);
		}
		return app;
	}
	
	public void update(String name, Seller app) {
		
		
		String sql = "update sellers set id=?, name=?, price=? where name=?";
		Connection connection = getConnection();
		
		try {
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setInt(1, app.getId());
			statement.setString(2, app.getName());
			statement.setDouble(3, app.getPrice());
			statement.setString(4, name);
			statement.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			closeConnection(connection);
		}		
	}
	
	
	public static void main(String[] args) {
		
		SellerDAO dao = new SellerDAO();
		Seller app1 = new Seller(11111,"Tof Ring", 28.99);
		dao.create(app1);
		/*
		Seller app1 = new Seller(1,"The Lord of Ring", 28.99);
		Seller app2 = new Seller(2,"The Kite Runner", 55.99);
		Seller app3 = new Seller(3,"The Da Vinci Code ", 36.59);
		Seller app4 = new Seller(4,"The Hunger Games", 56.89);
		Seller app5 = new Seller(5,"Life of Pi", 43.89);
		Seller app6 = new Seller(6,"Animal Farm", 67.99);
		Seller app7 = new Seller(7,"The Help", 19.99);
		Seller app8 = new Seller(8,"Gone Girl", 17.99);
		Seller app9 = new Seller(9,"Harry Potter", 39.99);
		Seller app10 = new Seller(10,"War and Peace", 47.99);
		dao.create(app1);
		dao.create(app2);
		dao.create(app3);
		dao.create(app4);
		dao.create(app5);
		dao.create(app6);
		dao.create(app7);
		dao.create(app8);
		dao.create(app9);
		dao.create(app10);
		*/
		
		
		BuyerDAO daoo = new BuyerDAO();
		
		/*
		Buyer app11 = new Buyer(38.99, 1,"The Lord of Ring");
		Buyer app22 = new Buyer(65.99,2,"The Kite Runner");
		Buyer app33 = new Buyer(46.59,1,"The Da Vinci Code " );
		Buyer app44 = new Buyer(66.89, 3,"The Hunger Games" );
		Buyer app55 = new Buyer(53.89, 1,"Life of Pi");
		Buyer app66 = new Buyer(77.99, 3,"Animal Farm");
		Buyer app77 = new Buyer(29.99,1,"The Help");
		Buyer app88 = new Buyer(27.99, 3,"Gone Girl");
		Buyer app99 = new Buyer(49.99, 6, "Harry Potter");
		//Buyer app10 = new Buyer(57.99, 10,"War and Peace");
		daoo.create(app11);
		daoo.create(app22);
		daoo.create(app33);
		daoo.create(app44);
		daoo.create(app55);
		daoo.create(app66);
		daoo.create(app77);
		daoo.create(app88);
		daoo.create(app99);
		*/
		
		//Seller apS1 = new Seller(11,"XXX", 28.99);
		//dao.create(apS1);
		
		//Buyer apB1 = new Buyer(38.99, 1,"XXX");
		//daoo.create(apB1);
		/*
		Connection connection = dao.getConnection();
		System.out.println(connection);
		dao.closeConnection(connection);
		*/
		
	}

}
